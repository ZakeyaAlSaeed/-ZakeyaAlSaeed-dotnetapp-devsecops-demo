name: Deploying dotnet to IIS Azure Windows Server

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-dotnet-app:
    name: Build Dotnet Application
    # strategy:
    #   matrix:
    #     configuration: [Debug, Release]
    runs-on: ubuntu-latest 
    steps:
    - uses: actions/checkout@v3

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v3
      with:
        dotnet-version: 6.0.405
    
      
    - name: Verify .NET Version 
      run: dotnet --version

    - name: Download the Code
      uses: actions/checkout@v3

    - name: Publish with dotnet
      run: |
        dotnet publish -o output

    - name: CHeck location and files
      run: |
        ls 

    - name: Upload file
      uses: actions/upload-artifact@v2
      with:
        name: my-artifact
        path: ./output/*

    
    # - name: Depoly to IIS
    #   run: |
    #     iisreset /stop
    #     Copy-Item ./dotnetapp-devsecops-demo/* C:/inetpub/wwwroot/output -Recurse -Force
    #     iisreset /start

  #   - name: Rename
  #     run: sed -i "s/0.0.1-SNAPSHOT/${{github.run_number}}/g" pom.xml

  #   - name: Build the Code
  #     run: ./mvnw package

  #   - name: Verify the Build is Created or Not
  #     run: ls -l target/*.war

  #   - uses: actions/upload-artifact@v2
  #     with:
  #       name: my-artifact
  #       path: ./target/demo-${{github.run_number}}.war

  # deployment-springboot-app:
  #   name: Deploy Springboot Application
  #   runs-on: ubuntu-latest
  #   needs: build-springboot-app
  #   steps:

  #     - uses: actions/checkout@v2
  #     - uses: actions/download-artifact@v2
  #       with:
  #         name: my-artifact
  #     - run: ls

  #     - name: Deploy the Build to Tomcat
  #       uses: mdallasanta/ssh-scp-deploy@v1.2.0
  #       with:
  #         local: 'demo-${{github.run_number}}.war'                                                 
  #         remote: 'C:\Program Files\Apache Software Foundation\Tomcat 10.0\webapps\'                                               
  #         host: ${{secrets.HOST}}                                  
  #         user: ${{secrets.USER}}
  #         password: ${{secrets.PASSWORD}}
  #         pre_upload: echo "This will be executed before the upload!"
  #         post_upload: echo "This will be executed after the upload!"
  #         ssh_options: -o StrictHostKeyChecking=no
  #         scp_options: -v

  # verify-springboot-app:
  #   name: Health check 
  #   runs-on: ubuntu-latest
  #   needs: deployment-springboot-app
  #   steps:
  #     - name: Using CURL to verify the app
  #       run: curl ${{secrets.HOST}}:8080/demo-${{github.run_number}}/actuator/health